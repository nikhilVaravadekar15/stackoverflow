// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow

  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Question      Question[]
  Answer        Answer[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.LongText
  upvotes     Int       @default(0)
  downvotes   Int       @default(0)
  answers     Answer[]
  comments    Comment[]
  asked       DateTime  @default(now())
  modified    DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Answer {
  id          String    @id @default(cuid())
  description String?   @db.LongText
  upvotes     Int       @default(0)
  downvotes   Int       @default(0)
  asked       DateTime  @default(now())
  modified    DateTime?

  userId     String
  user       User      @relation(fields: [userId], references: [id])
  questionId String?
  Question   Question? @relation(fields: [questionId], references: [id])
}

model Comment {
  id          String    @id @default(cuid())
  description String?   @db.Text
  asked       DateTime  @default(now())
  modified    DateTime?

  userId     String
  user       User      @relation(fields: [userId], references: [id])
  questionId String?
  Question   Question? @relation(fields: [questionId], references: [id])
}
